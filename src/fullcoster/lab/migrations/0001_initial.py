# Generated by Django 2.2.8 on 2019-12-20 09:10

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import simple_history.models

from ...constants.entities import PriceCategory


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Gestionnaire',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(default=None, max_length=200)),
                ('last_name', models.CharField(default=None, max_length=200)),
                ('email', models.EmailField(default=None, max_length=200)),
            ],
            options={
                'ordering': ['last_name'],
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.CharField(max_length=200)),
                ('description', models.CharField(default='', max_length=200)),
            ],
            options={
                'ordering': ['group'],
            },
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price_category', models.CharField(choices=PriceCategory.as_choices(),
                                                    default=PriceCategory.T1.name,
                                                    max_length=200)),
                ('price', models.FloatField(default=0)),
                ('price_name', models.CharField(default='', max_length=200)),
                ('price_entity', models.CharField(choices=[('SPECTRO', 'Optical Spectroscopy'), ('TEM', 'Electronic Microscopy'), ('PREPA', 'Sample Preparation'), ('MEBA', 'Advanced MEB'), ('FIBCR', 'FIB Clean Room'), ('SOFT', 'Soft Matter'), ('MATCARAC', 'Material Caracterisation'), ('MAGNETIC', 'Magnetic Measurement'), ('CHEM', 'Chemistry'), ('CLEANR', 'Clean Room Processes'), ('UHVI', 'UHV Imagery'), ('LT4', 'LT-UHV 4 tips'), ('DUFG', 'Growth DUF'), ('NEARF', 'Near-field microscopy'), ('GROWTHIMP', 'Growth and Implantation'), ('MECA', 'Mechanic Service'), ('ELEC', 'Electronic Service')], default=('SPECTRO', 'Optical Spectroscopy'), max_length=200)),
            ],
            options={
                'ordering': ['price_entity', 'price_name', 'price_category'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_last_name', models.CharField(max_length=200)),
                ('user_first_name', models.CharField(max_length=200)),
                ('is_left', models.BooleanField(default=False)),
                ('group', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='lab.Group')),
            ],
            options={
                'ordering': ['user_last_name'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_name', models.CharField(max_length=200)),
                ('project_pi', models.CharField(max_length=200)),
                ('pricing', models.CharField(choices=[('T1', 'Private Prices'), ('T2', 'Academic Prices'), ('T3', 'Internal Fact.'), ('T3ANR', 'Internal Fact. ANR')], default='T3ANR', max_length=200)),
                ('expired', models.BooleanField(default=False)),
                ('expired_date', models.DateField(default=django.utils.timezone.now)),
                ('amount_left', models.FloatField(default=0.0)),
                ('gestionnaire', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='lab.Gestionnaire')),
            ],
            options={
                'ordering': ['project_name'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalUser',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('user_last_name', models.CharField(max_length=200)),
                ('user_first_name', models.CharField(max_length=200)),
                ('is_left', models.BooleanField(default=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('group', models.ForeignKey(blank=True, db_constraint=False, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='lab.Group')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical user',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalProject',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('project_name', models.CharField(max_length=200)),
                ('project_pi', models.CharField(max_length=200)),
                ('pricing', models.CharField(choices=[('T1', 'Private Prices'), ('T2', 'Academic Prices'), ('T3', 'Internal Fact.'), ('T3ANR', 'Internal Fact. ANR')], default='T3ANR', max_length=200)),
                ('expired', models.BooleanField(default=False)),
                ('expired_date', models.DateField(default=django.utils.timezone.now)),
                ('amount_left', models.FloatField(default=0.0)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('gestionnaire', models.ForeignKey(blank=True, db_constraint=False, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='lab.Gestionnaire')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical project',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalGroup',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('group', models.CharField(max_length=200)),
                ('description', models.CharField(default='', max_length=200)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical group',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Extraction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_after', models.DateField(default=django.utils.timezone.now)),
                ('date_before', models.DateField(default=django.utils.timezone.now)),
                ('creation_date', models.DateField(default=django.utils.timezone.now)),
                ('creation_id', models.IntegerField(default=-1)),
                ('factured', models.BooleanField(default=False)),
                ('amount', models.FloatField(default=0.0)),
                ('billing', models.CharField(choices=[('SPECTRO', 'Optical Spectroscopy'), ('TEM', 'Electronic Microscopy'), ('PREPA', 'Sample Preparation'), ('MEBA', 'Advanced MEB'), ('FIBCR', 'FIB Clean Room'), ('SOFT', 'Soft Matter'), ('MATCARAC', 'Material Caracterisation'), ('MAGNETIC', 'Magnetic Measurement'), ('CHEM', 'Chemistry'), ('CLEANR', 'Clean Room Processes'), ('UHVI', 'UHV Imagery'), ('LT4', 'LT-UHV 4 tips'), ('DUFG', 'Growth DUF'), ('NEARF', 'Near-field microscopy'), ('GROWTHIMP', 'Growth and Implantation'), ('MECA', 'Mechanic Service'), ('ELEC', 'Electronic Service')], default=('SPECTRO', 'Optical Spectroscopy'), max_length=200)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lab.Project')),
            ],
            options={
                'ordering': ['creation_date', 'creation_id'],
            },
        ),
    ]
